type StoreConfig {
    help_desk: HelpDeskConfiguration @resolver(class: "\\Lof\\HelpDeskGraphQl\\Model\\Resolver\\HelpDeskConfiguration") @doc(description: "Help Desk configuration.")
}

type HelpDeskConfiguration {
    enabled: Boolean! @doc(description: "Enable Module.")
    enable_testmode: Boolean! @doc(description: "Enable Test Mode.")
    email_receive: String @doc(description: "Email Receive.")
    sender_email_identity: String @doc(description: "Sender Email Identity.")
    new_ticket_template: String @doc(description: "New Ticket Template.")
    new_message_template: String @doc(description: "New Message Template.")
    status_ticket_template: String @doc(description: "Status Ticket Template.")
    reminder_template: String @doc(description: "Reminder Template.")
    assign_ticket_template: String @doc(description: "Assign Ticket Template.")
    auto_close_ticket: String @doc(description: "Auto Close Ticket.")
    auto_reminder_ticket: String @doc(description: "Auto Reminder Ticket.")
    enable_chat: Boolean! @doc(description: "Enable Chat.")
    text_label_chat: String @doc(description: "Text Label Chat.")
    background_color_chat: String @doc(description: "Background Color Chat.")
    store: String @doc(description: "Store.")
}

type Query {

    LofHelpDeskTicketById (
            ticket_id: String @doc(description: "Query by ticket_id.")
    ) : Ticket @resolver( class: "Lof\\HelpDeskGraphQl\\Model\\Resolver\\Ticket") @doc(description: "Get Ticket by ID.")

    LofHelpDeskTicketList(
            search: String @doc(description: "Performs a full-text search using the specified key words."),
            filter: TicketFilterInput @doc(description: "Identifies which product attributes to search for and return."),
            pageSize: Int = 20 @doc(description: "Specifies the maximum number of results to return at once. This attribute is optional."),
            currentPage: Int = 1 @doc(description: "Specifies which page of results to return. The default value is 1."),
    ) : Tickets @resolver(class: "\\Lof\\HelpDeskGraphQl\\Model\\Resolver\\Tickets") @doc(description: "The tickets query searches for ticktets that match the criteria specified in the search and filter attributes")

    LofHelpDeskChatMessage (
        search: String @doc(description: "Performs a full-text search using the specified key words."),
        filter: ChatFilterInput @doc(description: "Identifies which product attributes to search for and return."),
        pageSize: Int = 20 @doc(description: "Specifies the maximum number of results to return at once. This attribute is optional."),
        currentPage: Int = 1 @doc(description: "Specifies which page of results to return. The default value is 1."),
    ) : Chats @resolver( class: "Lof\\HelpDeskGraphQl\\Model\\Resolver\\GetChats") @doc(description: "Get Chats.")

    LofHelpDeskCategories (
        search: String @doc(description: "Performs a full-text search using the specified key words."),
        filter: CategoryFilterInput @doc(description: "Identifies which product attributes to search for and return."),
        pageSize: Int = 20 @doc(description: "Specifies the maximum number of results to return at once. This attribute is optional."),
        currentPage: Int = 1 @doc(description: "Specifies which page of results to return. The default value is 1."),
    ) : Categories @resolver( class: "Lof\\HelpDeskGraphQl\\Model\\Resolver\\Categories") @doc(description: "Get Categories.")

    LofHelpDeskDepartments (
        search: String @doc(description: "Performs a full-text search using the specified key words."),
        filter: DepartmentFilterInput @doc(description: "Identifies which product attributes to search for and return."),
        pageSize: Int = 20 @doc(description: "Specifies the maximum number of results to return at once. This attribute is optional."),
        currentPage: Int = 1 @doc(description: "Specifies which page of results to return. The default value is 1."),
    ) : Departments @resolver( class: "Lof\\HelpDeskGraphQl\\Model\\Resolver\\Departments") @doc(description: "Get Categories.")

    LofHelpDeskOrders : Orders @resolver( class: "Lof\\HelpDeskGraphQl\\Model\\Resolver\\Orders") @doc(description: "Get Order by ID.")

    LofHelpDeskPriority  : Priorities @resolver( class: "Lof\\HelpDeskGraphQl\\Model\\Resolver\\Priority") @doc(description: "Get Priority.")
}

type Mutation {

    LofHelpDeskCreateTicket(input: TicketInput!): Ticket @resolver(class: "\\Lof\\HelpDeskGraphQl\\Model\\Resolver\\CreateTicket") @doc(description: "Create a new Ticket")

    LofHelpDeskSendMessageTicket(input: MessageInput!): Message @resolver(class: "\\Lof\\HelpDeskGraphQl\\Model\\Resolver\\SendMessageTicket") @doc(description: "Send Message in Ticket")

    LofHelpDeskRatingTicket(input: RatingInput!): Ticket @resolver(class: "\\Lof\\HelpDeskGraphQl\\Model\\Resolver\\RateTicket") @doc(description: "Rate Ticket")

    LofHelpDeskLikeTicket(input: LikeInput!): Like @resolver(class: "\\Lof\\HelpDeskGraphQl\\Model\\Resolver\\LikeTicket") @doc(description: "Like Ticket")

    LofHelpDeskChat(input: ChatInput!): Chat @resolver(class: "\\Lof\\HelpDeskGraphQl\\Model\\Resolver\\Chat") @doc(description: "Chat")
}

type Tickets {
    total_count: Int @doc(description: "The number of tickets returned")
    items: [Ticket] @doc(description: "An array of tickets that match the specified search criteria")
}

type Orders {
    total_count: Int @doc(description: "The number of orders returned")
    items: [OrderById] @doc(description: "An array of orders that match the specified search criteria")
}


type Priorities {
    items : [Priority] @doc(description: "Priority")
}

type Priority {
    title: String @doc(description: "Title")
    id: Int @doc(description: "Id")
}

type Categories {
    total_count: Int @doc(description: "The number of Categories returned")
    items: [Category] @doc(description: "An array of Categories that match the specified search criteria")
}

type Departments {
    total_count: Int @doc(description: "The number of Departments returned")
    items: [Department] @doc(description: "An array of Departments that match the specified search criteria")
}

type Chats {
    total_count: Int @doc(description: "The number of message returned")
    items: [Chat] @doc(description: "An array of messages that match the specified search criteria")
}

input ChatInput {
    body_msg  : String @doc(description: "Body.")
}

input LikeInput {
    message_id  : String @doc(description: "message ID.")
}

input RatingInput {
    ticket_id  : String @doc(description: "ticket ID.")
    rating  : String @doc(description: "rating.")
}

input MessageInput {
    ticket_id  : String @doc(description: "ticket ID.")
    body  : String @doc(description: "body of message.")
    attachment : String  @doc(description: "attachment.")
    attachment_name : String  @doc(description: "attachment_name.")
}

input TicketInput {
    category_id  : String  @doc(description: "category_id.")
    product_id  : [String]  @doc(description: "product_id.")
    subject  : String  @doc(description: "subject.")
    description  : String  @doc(description: "description.")
    priority_id  : String  @doc(description: "priority.")
    order_id  : String  @doc(description: "order_id.")
    attachment : String  @doc(description: "attachment.")
    attachment_name : String  @doc(description: "attachment_name.")
}

type Ticket {
    ticket_id  : String  @doc(description: "Query by ticket_id.")
    code  : String  @doc(description: "Query by code.")
    category_id  : String  @doc(description: "Query by category_id.")
    product_id  : [String]  @doc(description: "Query by product_id.")
    user_id  : String  @doc(description: "Query by user_id.")
    subject  : String  @doc(description: "Query by subject.")
    description  : String  @doc(description: "Query by description.")
    priority  : String  @doc(description: "Query by priority.")
    _id  : String  @doc(description: "Query by _id.")
    status_id  : String  @doc(description: "Query by status_id.")
    status  : String  @doc(description: "Query by status.")
    department_id  : String  @doc(description: "Query by department_id.")
    department  : String  @doc(description: "Query by department.")
    customer_id  : String  @doc(description: "Query by customer_id.")
    quote_address_id  : String  @doc(description: "Query by quote_address_id.")
    customer_email  : String  @doc(description: "Query by customer_email.")
    customer_name  : String  @doc(description: "Query by customer_name.")
    order_id  : String  @doc(description: "Query by order_id.")
    last_reply_name  : String  @doc(description: "Query by last_reply_name.")
    last_reply_at  : String  @doc(description: "Query by last_reply_at.")
    reply_cnt  : String  @doc(description: "Query by reply_cnt.")
    store_id  : String  @doc(description: "Query by store_id.")
    created_at  : String  @doc(description: "Query by created_at.")
    updated_at  : String  @doc(description: "Query by updated_at.")
    forder  : String  @doc(description: "Query by forder.")
    email_id  : String  @doc(description: "Query by email_id.")
    rating  : String  @doc(description: "Query by rating.")
    first_reply_at  : String  @doc(description: "Query by first_reply_at.")
    first_resolved_at  : String  @doc(description: "Query by first_resolved_at.")
    fp_period_at  : String  @doc(description: "Query by fp_period_at.")
    fp_period_unit  : String  @doc(description: "Query by fp_period_unit.")
    fp_periof_value  : String  @doc(description: "Query by fp_periof_value.")
    fp_execute_at  : String  @doc(description: "Query by fp_execute_at.")
    fp_is_remind  : String  @doc(description: "Query by fp_is_remind.")
    fp_remind_email  : String  @doc(description: "Query by fp_remind_email.")
    fp_priority_id  : String  @doc(description: "Query by fp_priority_id.")
    fp_status_id  : String  @doc(description: "Query by fp_status_id.")
    fp_department_id  : String  @doc(description: "Query by fp_department_id.")
    fp_user_id  : String  @doc(description: "Query by fp_user_id.")
    channel  : String  @doc(description: "Query by channel.")
    channel_data  : String  @doc(description: "Query by channel_data.")
    third_party_email  : String  @doc(description: "Query by third_party_email.")
    search_index  : String  @doc(description: "Query by search_index.")
    cc  : String  @doc(description: "Query by cc.")
    bcc  : String  @doc(description: "Query by bcc.")
    is_read  : String  @doc(description: "Query by is_read.")
    merged_ticket_id  : String  @doc(description: "Query by merged_ticket_id.")
}

type Message {
    message_id  : String  @doc(description: "Query by message ID.")
    ticket_id  : String  @doc(description: "Query by ticket ID.")
    email_id  : String  @doc(description: "Query by email ID.")
    user_id  : String  @doc(description: "Query by user_id.")
    body  : String  @doc(description: "Query by body.")
    user_email  : String  @doc(description: "Query by user email.")
    user_name  : String  @doc(description: "Query by user name.")
    customer_id  : String  @doc(description: "Query by customer ID.")
    customer_email  : String  @doc(description: "Query by customer email.")
    customer_name  : String  @doc(description: "Query by customer name.")
    body_format  : String  @doc(description: "Query by body format.")
    created_at  : String  @doc(description: "Query by created_at.")
    updated_at  : String  @doc(description: "Query by updated_at.")
    is_read  : String  @doc(description: "Query by is_read.")
}

type Like {
    message_id  : String  @doc(description: "Query by message ID.")
    like_id  : String  @doc(description: "Query by like ID.")
    customer_id  : String  @doc(description: "Query by customer ID.")
    customer_email  : String  @doc(description: "Query by customer email.")
    customer_name  : String  @doc(description: "Query by customer name.")
}

type Chat {
    chat_id  : String  @doc(description: "Query by chat ID.")
    message_id  : String  @doc(description: "Query by message ID.")
    user_id  : String  @doc(description: "Query by user ID.")
    customer_id  : String  @doc(description: "Query by customer ID.")
    customer_email  : String  @doc(description: "Query by customer email.")
    customer_name  : String  @doc(description: "Query by customer name.")
    is_read: String  @doc(description: "Is Read.")
    user_name: String  @doc(description: "User Name.")
    name: String  @doc(description: "Name.")
    body_msg: String  @doc(description: "Body.")
    created_at: String  @doc(description: "Created At.")
    updated_at: String  @doc(description: "Updated At.")
}


type Department {
    department_id  : String  @doc(description: "Query by department ID.")
    title  : String  @doc(description: "Query by title.")
    identifier  : String  @doc(description: "Query by identifier.")
    creation_time  : String  @doc(description: "Query by creation_time.")
    update_time  : String  @doc(description: "Query by update_time.")
    position  : String  @doc(description: "Query by position.")
    is_active: String  @doc(description: "Is Active.")
}

type Category {
    category_id  : String  @doc(description: "Query by category ID.")
    title  : String  @doc(description: "Query by title.")
    cat_icon  : String  @doc(description: "Query by Category Icon.")
    page_title  : String  @doc(description: "Query by page title.")
    identifier  : String  @doc(description: "Query by identifier.")
    description  : String  @doc(description: "Query by description.")
    grid_column: String  @doc(description: "Grid column.")
    layout_type: String  @doc(description: "Layout Type.")
    page_layout: String  @doc(description: "Page Layout.")
    meta_keywords: String  @doc(description: "Meta Keywords.")
    meta_description: String  @doc(description: "Meta Description.")
    image: String  @doc(description: "Image.")
    creation_time: String  @doc(description: "Creation Time.")
    update_time: String  @doc(description: "Update Time.")
    position: String  @doc(description: "Position.")
    include_in_sidebar: String  @doc(description: "Include In Sidebar.")
    is_active: String  @doc(description: "Is Active.")
}

input ChatFilterInput {
    created_at: FilterTypeInput @doc(description: "Created At")
    updated_at: FilterTypeInput @doc(description: "Updated At")
    or: ChatFilterInput @doc(description: "The keyword required to perform a logical OR comparison")
}

input TicketFilterInput {
    ticket_id: FilterTypeInput @doc(description: "Ticket ID")
    created_at: FilterTypeInput @doc(description: "Created At")
    updated_at: FilterTypeInput @doc(description: "Updated At")
    identifier: FilterTypeInput @doc(description: "Identifier")
    user_id: FilterTypeInput @doc(description: "User ID")
    email_id: FilterTypeInput @doc(description: "Email Id")
    store_id: FilterTypeInput @doc(description: "Store Id")
    or: TicketFilterInput @doc(description: "The keyword required to perform a logical OR comparison")
}

input CategoryFilterInput {
    category_id: FilterTypeInput @doc(description: "Category ID")
    creation_time: FilterTypeInput @doc(description: "Created At")
    update_time: FilterTypeInput @doc(description: "Update Time")
    position: FilterTypeInput @doc(description: "Position")
    include_in_sidebar: FilterTypeInput @doc(description: "Include In Sidebar")
    is_active: FilterTypeInput @doc(description: "Is Active")
    or: CategoryFilterInput @doc(description: "The keyword required to perform a logical OR comparison")
}


input DepartmentFilterInput {
    department_id  : FilterTypeInput  @doc(description: "Query by department ID.")
    title  : FilterTypeInput  @doc(description: "Query by title.")
    identifier  : FilterTypeInput  @doc(description: "Query by identifier.")
    creation_time  : FilterTypeInput  @doc(description: "Query by creation_time.")
    update_time  : FilterTypeInput  @doc(description: "Query by update_time.")
    position  : FilterTypeInput  @doc(description: "Query by position.")
    is_active: FilterTypeInput  @doc(description: "Is Active.")
    or: DepartmentFilterInput @doc(description: "The keyword required to perform a logical OR comparison")
}

type OrderById @doc(description: "Contains details about each of the customer's orders") {
    id: ID! @doc(description: "Unique identifier for the order")
    order_date: String! @doc(description: "The date the order was placed")
    status: String! @doc(description: "The current status of the order")
    number: String! @doc(description: "The order number")
    items: [OrderItemInterface] @doc(description: "An array containing the items purchased in this order") @resolver(class: "Magento\\SalesGraphQl\\Model\\Resolver\\OrderItems")
    invoices: [Invoice]! @doc(description: "A list of invoices for the order") @resolver(class: "Magento\\SalesGraphQl\\Model\\Resolver\\Invoices")
    shipments: [OrderShipment] @doc(description: "A list of shipments for the order") @resolver(class: "Magento\\SalesGraphQl\\Model\\Resolver\\Shipments")
    credit_memos: [CreditMemo] @doc(description: "A list of credit memos") @resolver(class: "Magento\\SalesGraphQl\\Model\\Resolver\\CreditMemos")
    payment_methods: [OrderPaymentMethod] @doc(description: "Payment details for the order")
    shipping_address: OrderAddress @doc(description: "The shipping address for the order")
    billing_address: OrderAddress @doc(description: "The billing address for the order")
    carrier: String @doc(description: "The shipping carrier for the order delivery") @resolver(class: "Magento\\SalesGraphQl\\Model\\Resolver\\CustomerOrders\\Carrier")
    shipping_method: String @doc(description: "The delivery method for the order")
    comments: [SalesCommentItem] @doc(description: "Comments about the order")
    increment_id: String @deprecated(reason: "Use the id attribute instead")
    order_number: String! @deprecated(reason: "Use the number attribute instead")
    created_at: String @deprecated(reason: "Use the order_date attribute instead")
    grand_total: Float  @deprecated(reason: "Use the totals.grand_total attribute instead")
}

